{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0c50c4b6",
   "metadata": {},
   "source": [
    "# ISE 562 - HW3 Code\n",
    "### Eli Wang"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d1f01049",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a03c39c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rent</th>\n",
       "      <th>Deposit</th>\n",
       "      <th>Distance</th>\n",
       "      <th>Noise</th>\n",
       "      <th>Lease</th>\n",
       "      <th>Media</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>450</td>\n",
       "      <td>1100</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>380</td>\n",
       "      <td>850</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>550</td>\n",
       "      <td>1000</td>\n",
       "      <td>0.8</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>640</td>\n",
       "      <td>900</td>\n",
       "      <td>0.5</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Rent  Deposit  Distance  Noise  Lease  Media\n",
       "A   450     1100       5.0      5     12      1\n",
       "B   380      850       4.0      3     12      0\n",
       "C   550     1000       0.8      8      9      1\n",
       "D   640      900       0.5      9      9      2"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "apt = [\"A\", \"B\", \"C\", \"D\"]\n",
    "rent = [450, 380, 550, 640]\n",
    "deposit = [1100, 850, 1000, 900]\n",
    "distance = [5, 4, 0.8, 0.5]\n",
    "noise = [5, 3, 8, 9]\n",
    "lease = [12, 12, 9, 9]\n",
    "media = [1, 0, 1, 2]\n",
    "columns = [\"Rent\", \"Deposit\", \"Distance\", \"Noise\", \"Lease\", \"Media\"]\n",
    "\n",
    "apt_df = pd.DataFrame(zip(rent, deposit, distance, noise, lease, media), columns = columns, index = apt)\n",
    "apt_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c2a112dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Rent         450.0\n",
       "Deposit     1100.0\n",
       "Distance       5.0\n",
       "Noise          5.0\n",
       "Lease         12.0\n",
       "Media          1.0\n",
       "Name: A, dtype: float64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(apt_df.loc[\"A\"])\n",
    "apt_df.loc[\"A\"]\n",
    "# apt_df.loc[\"A\"][\"Rent\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "253ea935",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # The usage of zip()\n",
    "# tuples = zip(rent, deposit, distance, noise, lease, media)\n",
    "# print(list(tuples))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d485bad8",
   "metadata": {},
   "outputs": [],
   "source": [
    "K = -0.947262\n",
    "\n",
    "def UR(R):\n",
    "    return (-1/260)*(R-640)\n",
    "\n",
    "def UD(D):\n",
    "    return (-1/250)*(D-1100)\n",
    "\n",
    "def UM(M):\n",
    "    return (-2/9)*(M-5)\n",
    "\n",
    "def UN(N):\n",
    "    return (1/36)*(N-9)**2\n",
    "\n",
    "def UL(L):\n",
    "    return (1/9)*(12-L)**2\n",
    "\n",
    "def UI(I):\n",
    "    return (1/4)*I**2\n",
    "\n",
    "ks = [0.4, 0.4, 0.1, 0.2, 0.6, 0.6]\n",
    "functions = [UR, UD, UM, UN, UL, UI]\n",
    "\n",
    "def UX(apt):\n",
    "    data = apt_df.loc[apt]\n",
    "    multiplication = 1\n",
    "    for i in range(len(columns)):\n",
    "        term = 1 + K * ks[i] * functions[i](data[columns[i]])\n",
    "        multiplication = multiplication * term\n",
    "    return (1/K) * (multiplication - 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fc516e59",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.45591719619888615"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "UX(\"A\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "63fd23d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7325382902083629"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "UX(\"B\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4c8dcb5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7943592075669489"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "UX(\"C\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6322e783",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.931590525665544"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "UX(\"D\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed1d73f5",
   "metadata": {},
   "source": [
    "### Q3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b804395a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.17391304347826086,\n",
       " 0.17391304347826086,\n",
       " 0.043478260869565216,\n",
       " 0.08695652173913043,\n",
       " 0.26086956521739124,\n",
       " 0.26086956521739124]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nor_ks = [float(k)/sum(ks) for k in ks]\n",
    "nor_ks\n",
    "# sum(nor_ks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74bc47cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_UX(apt):\n",
    "    data = apt_df.loc[apt]\n",
    "    addition = 0\n",
    "    for i in range(len(columns)):\n",
    "        term = nor_ks[i] * functions[i](data[columns[i]])\n",
    "        addition += term\n",
    "    return addition"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
